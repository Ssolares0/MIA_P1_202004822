void comandoReporteInode(char id[25],char Path[512]) {
    Mount ParticionMontada;
    string idString = id;
    bool existe = false;
    for (int i = 0; i < particionesMontadas.size(); ++i) {
        ParticionMontada = particionesMontadas[i];
        if (ParticionMontada.id == idString) {
            existe = true;
            break;
        }
    }
    if (!existe) {
        cout << "No existe la particion montada con el id: " << idString << endl;
        return;
    }

    //Crear el directorio
    string pathSinNombre = Path;
    int pos = pathSinNombre.find_last_of("/");
    pathSinNombre = pathSinNombre.substr(0, pos + 1);


    string Directorio = "";
    Directorio += pathSinNombre;
    string crearDirectorio = "mkdir -p \'" + Directorio + "\'";
    system(crearDirectorio.c_str());

    FILE *archivo;
    archivo = fopen(ParticionMontada.path.c_str(), "rb+");
    if (archivo == NULL) {
        cout << "No se pudo abrir el archivo" << endl;
        return;
    }

    SuperBlock superBloque;
    fseek(archivo, ParticionMontada.start, SEEK_SET);
    fread(&superBloque, sizeof (SuperBlock), 1, archivo);

    int DireccionInodo = superBloque.s_inode_start;
    string Dot = "digraph G {\n";
    int InodoAnterior = 0;
    for (int i = 0; i < superBloque.s_inodes_count; ++i) {
        char Escrito ;
        fseek(archivo, DireccionInodo+i, SEEK_SET);
        fread(&Escrito, sizeof (char), 1, archivo);

        if(Escrito == 1){
            Inodes inodo;
            fseek(archivo, superBloque.s_inode_start+sizeof(Inodes)*i , SEEK_SET);
            fread(&inodo, sizeof (Inodes), 1, archivo);
            Dot += "a"+to_string(i)+"[shape=none, color=lightgrey, label=<\n";
            Dot += "<TABLE cellspacing=\"3\" cellpadding=\"2\" style=\"rounded\">\n";
            Dot += "<TR><TD>Inodo_"+ to_string(i)+"</TD><TD></TD></TR>\n";
            Dot += "<TR><TD> i_uid: </TD><TD> "+to_string(inodo.i_uid)+"</TD></TR>\n";
            Dot += "<TR><TD> i_gid: </TD><TD> "+to_string(inodo.i_gid)+"</TD></TR>\n";
            Dot += "<TR><TD> i_size: </TD><TD> "+to_string(inodo.i_size)+"</TD></TR>\n";
            tm *FechaCreacion = localtime(&inodo.i_atime);
            string StringFecha =
                    to_string(FechaCreacion->tm_mday) + "/" + to_string(FechaCreacion->tm_mon + 1) +
                    "/" + to_string(FechaCreacion->tm_year + 1900) + " " +
                    to_string(FechaCreacion->tm_hour) + ":" + to_string(FechaCreacion->tm_min);
            Dot += "<TR><TD> i_atime: </TD><TD> "+StringFecha+"</TD></TR>\n";
            tm *FechaModificacion = localtime(&inodo.i_mtime);
            StringFecha =
                    to_string(FechaModificacion->tm_mday) + "/" + to_string(FechaModificacion->tm_mon + 1) +
                    "/" + to_string(FechaModificacion->tm_year + 1900) + " " +
                    to_string(FechaModificacion->tm_hour) + ":" + to_string(FechaModificacion->tm_min);
            Dot += "<TR><TD> i_mtime: </TD><TD> "+StringFecha+"</TD></TR>\n";
            tm *FechaAcceso = localtime(&inodo.i_ctime);
            StringFecha =
                    to_string(FechaAcceso->tm_mday) + "/" + to_string(FechaAcceso->tm_mon + 1) +
                    "/" + to_string(FechaAcceso->tm_year + 1900) + " " +
                    to_string(FechaAcceso->tm_hour) + ":" + to_string(FechaAcceso->tm_min);
            for (int j = 0; j < 15; ++j) {
                Dot += "<TR><TD> i_block["+to_string(j)+"]: </TD><TD> "+to_string(inodo.i_block[j])+"</TD></TR>\n";
            }
            Dot += "<TR><TD> i_type: </TD><TD> "+to_string(inodo.i_type)+"</TD></TR>\n";
            Dot += "<TR><TD> i_perm: </TD><TD> "+to_string(inodo.i_perm)+"</TD></TR>\n";
            Dot += "</TABLE>>]; \n\n";

            if(i - 1 >= 0){
                Dot += "a" + to_string(InodoAnterior) + "-> a"+ to_string(i) + "\n\n";
            }

            InodoAnterior = i;
        }
    }
    Dot += "}";

    string dot_name = pathSinNombre + "Inode.dot";

    fclose(archivo);


    //sacar extension del path
    string path = Path;
    string extension = path.substr(path.find_last_of(".") + 1);
    if (extension == "pdf"){
        FILE *dot_file = fopen(dot_name.c_str(), "wb");
        fwrite(Dot.c_str(), Dot.length(), 1, dot_file);
        fclose(dot_file);
        string dot_svg = "dot -T pdf "+ dot_name+" -o "+path;
        system(dot_svg.c_str());
    }else if (extension == "png"){
        FILE *dot_file = fopen(dot_name.c_str(), "wb");
        fwrite(Dot.c_str(), Dot.length(), 1, dot_file);
        fclose(dot_file);
        string dot_svg = "dot -T png "+ dot_name+" -o "+path;
        system(dot_svg.c_str());
    }else if (extension == "jpg"){
        FILE *dot_file = fopen(dot_name.c_str(), "wb");
        fwrite(Dot.c_str(), Dot.length(), 1, dot_file);
        fclose(dot_file);
        string dot_svg = "dot -T jpg "+ dot_name+" -o "+path;
        system(dot_svg.c_str());
    }else if (extension == "svg"){
        FILE *dot_file = fopen(dot_name.c_str(), "wb");
        fwrite(Dot.c_str(), Dot.length(), 1, dot_file);
        fclose(dot_file);
        string dot_svg = "dot -T svg "+ dot_name+" -o "+path;
        system(dot_svg.c_str());
    }else {
        cout << "Extension no valida" << endl;
    }
    cout << "Reporte Inode creado" << endl;
}